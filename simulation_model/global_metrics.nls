globals
[#bad-behaving-agents 
  needs-weight-table 
  value-weight-table 
  value-mean-std-table 
  needs-mean-std-table 
  
  #infected-times-ticks
  #delivered-supply-proposed-this-tick
  when-has-2%-infected-threshold-first-been-met?
  when-has-5%-infected-threshold-first-been-met?
  #contacts-last-tick
  
  first-infected-people
  #first-infected-people;;needed as infected people can die
  #infected-by-first-infected-people
  #infected-by-asymptomatic-people
  #people-infected-in-pubtrans
  #people-infected-in-shared-cars
  #people-infected-in-queuing
  #people-infected-in-general-travel
  #people-infected-in-hospitals
  #people-infected-in-workplaces
  #people-infected-in-homes
  #people-infected-in-public-leisure
  #people-infected-in-private-leisure
  #people-infected-in-schools
  #people-infected-in-universities
  #people-infected-in-essential-shops
  #people-infected-in-non-essential-shops
  
  age-group-to-age-group-#contacts-table
  age-group-to-age-group-#infections-last-tick-table
  
  #contacts-in-pubtrans
  #contacts-in-shared-cars
  #contacts-in-queuing
  #contacts-in-general-travel
  #contacts-in-hospitals
  #contacts-in-workplaces
  #contacts-in-homes
  #contacts-in-public-leisure
  #contacts-in-private-leisure
  #contacts-in-schools
  #contacts-in-universities
  #contacts-in-essential-shops
  #contacts-in-non-essential-shops
  
  #cumulative-youngs-infected
  #cumulative-students-infected
  #cumulative-workers-infected
  #cumulative-retireds-infected
  
  #cumulative-youngs-infector
  #cumulative-students-infector
  #cumulative-workers-infector
  #cumulative-retireds-infector
  
  #youngs-at-start
  #students-at-start
  #workers-at-start
  #retireds-at-start
  
  #hospitalizations-youngs-this-tick
  #hospitalizations-students-this-tick
  #hospitalizations-workers-this-tick
  #hospitalizations-retired-this-tick
  
  number-of-people-per-age-having-ever-reached-severe-table
  contamination-network-table
  #infected-people-per-ticks
  #hospitalized-per-tick
  values-weight-table
  
  location-violating-quarantining-list 
  
  R-naught-list
  consecutive-ticks-R-naught-is-<-one
  consecutive-ticks-R-naught-is->=-one
  
]

to-report ratio-infected
  report #infected / count people
end

to-report ratio-infected-youngs
  if #youngs-at-start > 0[  report #cumulative-youngs-infected / #youngs-at-start]
  report 0
end

to-report ratio-infected-students
  if #students-at-start > 0 [report #cumulative-students-infected / #students-at-start]
  report 0
end

to-report ratio-infected-workers
  if #workers-at-start > 0 [report #cumulative-workers-infected / #workers-at-start]
  report 0
end

to-report ratio-infected-retireds
  if #retireds-at-start > 0 [report #cumulative-retireds-infected / #retireds-at-start]
  report 0
end

to-report total-amount-of-capital-in-the-system
  report sum [my-amount-of-capital] of people + sum [amount-of-capital] of gathering-points + government-reserve-of-capital
end

to update-metrics
  set #infected-times-ticks #infected-times-ticks + #infected
  
  if ratio-infected > 0.02 and when-has-2%-infected-threshold-first-been-met? = "never"
  [set when-has-2%-infected-threshold-first-been-met? ticks]

  if ratio-infected > 0.05 and when-has-5%-infected-threshold-first-been-met? = "never"
  [set when-has-5%-infected-threshold-first-been-met? ticks]
  
  update-number-of-consecutive-days-R-naught-is-higher-or-lower-than-one 
  update-location-quarantining-violaters-list 

end

to-report bad-behaving?
  report is-violating-quarantine? and not is-believing-to-be-immune?
  
end
to update-location-quarantining-violaters-list
  ask people with [is-violating-quarantine? and not is-believing-to-be-immune?] [
    set #bad-behaving-agents  #bad-behaving-agents  + 1
    foreach (list 
      who 
      ticks 
      [gathering-type] of current-activity 
      current-motivation 
      is-I-apply-social-distancing? 
      age 
      precision importance-weight-health 4
      precision importance-weight-food-safety 4
      precision importance-weight-financial-survival 4
      precision importance-weight-financial-stability 4
      precision importance-weight-sleep 4
      precision importance-weight-conformity 4
      precision importance-weight-risk-avoidance 4
      precision importance-weight-compliance 4
      precision importance-weight-belonging-subneed 4
      precision importance-weight-leisure 4
      precision importance-weight-luxury 4
      precision importance-weight-autonomy 4
      precision health-satisfaction-level 4
      precision food-safety-satisfaction-level 4
      precision financial-survival-satisfaction-level 4
      precision financial-stability-satisfaction-level 4
      precision sleep-satisfaction-level 4
      precision conformity-satisfaction-level 4
      precision risk-avoidance-satisfaction-level 4
      precision compliance-satisfaction-level 4
      precision belonging-satisfaction-level 4
      precision leisure-satisfaction-level 4
      precision luxury-satisfaction-level 4
      precision autonomy-satisfaction-level 4 
      TRANSFORM-LIST! activity-statisfaction-tracker ",") [x -> set location-violating-quarantining-list lput x  location-violating-quarantining-list]
]
 
end

to reset-metrics
  set contamination-network-table (list)
  set location-violating-quarantining-list (list)
  set #bad-behaving-agents 0
  set #admissions-last-tick 0 
  set #delivered-supply-proposed-this-tick 0
  set #contacts-last-tick 0
  set #contacts-in-pubtrans 0
  set #contacts-in-shared-cars 0
  set #contacts-in-queuing 0
  set #contacts-in-general-travel 0
  set #contacts-in-hospitals 0
  set #contacts-in-workplaces 0
  set #contacts-in-homes 0
  set #contacts-in-public-leisure 0
  set #contacts-in-private-leisure 0
  set #contacts-in-schools 0
  set #contacts-in-universities 0
  set #contacts-in-essential-shops 0
  set #contacts-in-non-essential-shops 0
  
  set #hospitalizations-youngs-this-tick 0
  set #hospitalizations-students-this-tick 0
  set #hospitalizations-workers-this-tick 0
  set #hospitalizations-retired-this-tick 0
 
  
  ;;reset age-group-to-age-group-#contacts-table
  foreach all-ages [ [x] -> foreach all-ages [ [y] -> table:put age-group-to-age-group-#contacts-table (list x y) 0]]
  foreach all-ages [ [x] -> foreach all-ages [ [y] -> table:put age-group-to-age-group-#infections-last-tick-table (list x y) 0]]
  
  set #infected-people-per-ticks lput #infected #infected-people-per-ticks
  set  #hospitalized-per-tick lput #taken-hospital-beds   #hospitalized-per-tick    
end

to increment-age-infection-information-metrics [infected infector]
  if [age = young-age] of infected [set #cumulative-youngs-infected #cumulative-youngs-infected + 1]
  if [age = student-age] of infected [set #cumulative-students-infected #cumulative-students-infected + 1]
  if [age = worker-age] of infected [set #cumulative-workers-infected #cumulative-workers-infected + 1]
  if [age = retired-age] of infected [set #cumulative-retireds-infected #cumulative-retireds-infected + 1]
  
  if [age = young-age] of infector [set #cumulative-youngs-infector #cumulative-youngs-infector + 1]
  if [age = student-age] of infector [set #cumulative-students-infector #cumulative-students-infector + 1]
  if [age = worker-age] of infector [set #cumulative-workers-infector #cumulative-workers-infector + 1]
  if [age = retired-age] of infector [set #cumulative-retireds-infector #cumulative-retireds-infector + 1]  
end

to increment-hospitalizations-global-metrics
  if age = young-age [set #hospitalizations-youngs-this-tick #hospitalizations-youngs-this-tick + 1]
  if age = student-age [set #hospitalizations-students-this-tick #hospitalizations-students-this-tick + 1]
  if age = worker-age [set #hospitalizations-workers-this-tick #hospitalizations-workers-this-tick + 1]
  if age = retired-age [set #hospitalizations-retired-this-tick #hospitalizations-retired-this-tick + 1]
end

to-report #people-at-start
  report #youngs-at-start + #workers-at-start + #students-at-start + #retireds-at-start
end

to-report ratio-of-workers-at-start
  report #workers-at-start / #people-at-start
end

to-report ratio-of-students-at-start
  report #students-at-start / #people-at-start
end

to-report ratio-of-retireds-at-start
  report #retireds-at-start / #people-at-start
end
  

to-report ratio-of-youngs-at-start
  report #youngs-at-start / #people-at-start
end


to-report ratio-age-group-to-age-group-#infections [infector-age infected-age]
  report table:get age-group-to-age-group-#infections-last-tick-table (list infector-age infected-age) / #initial-people-with-age infected-age
end

to add-to-contagion-tree [infector infectee context]
  if contamination-network-table = 0 [set contamination-network-table (list)]
  let loc 0
  let my-age 0
  let key infector
  let mot 0
  let numb 0
  let badass 0
  let sd 0
  let sl-health 0
  let sl-food-safe 0 
  let sl-finan-surv 0  
  let sl-finan-stab  0 
  let sl-sleep 0
  let sl-conf 0 
  let sl-risk-avoid 0 
  let sl-compl 0  
  let sl-belong 0 
  let sl-leis 0 
  let sl-lux 0 
  let sl-aut 0
  let iw-health 0
  let iw-food-safe 0 
  let iw-finan-surv 0  
  let iw-finan-stab  0 
  let iw-sleep 0
  let iw-conf 0 
  let iw-risk-avoid 0 
  let iw-compl 0  
  let iw-belong 0 
  let iw-leis 0 
  let iw-lux 0 
  let iw-aut 0
  let asr 0 
  
  ifelse infector != nobody 
  [set key [who] of infector
    set mot [current-motivation] of infectee
    set loc [gathering-type] of [current-activity] of infector
    set my-age [age] of infector 
    set badass [bad-behaving?] of infector
    set sd [is-I-apply-social-distancing?] of infector
    set numb count [current-gatherers] of [current-activity] of infectee
    set iw-health precision  [importance-weight-health] of infector 4
    set iw-food-safe precision [importance-weight-food-safety] of infector 4
    set iw-finan-surv precision [importance-weight-financial-survival] of infector 4
    set iw-finan-stab precision [importance-weight-financial-stability] of infector 4
    set iw-sleep precision [importance-weight-sleep] of infector 4
    set iw-conf precision [importance-weight-conformity] of infector 4
    set iw-risk-avoid precision [importance-weight-risk-avoidance] of infector 4
    set iw-compl precision [importance-weight-compliance] of infector 4
    set iw-belong precision [importance-weight-belonging-subneed] of infector 4
    set iw-leis precision [importance-weight-leisure] of infector 4
    set iw-lux precision [importance-weight-luxury] of infector 4
    set iw-aut precision [importance-weight-autonomy] of infector 4
    set sl-health precision [health-satisfaction-level] of infector 4 
    set sl-food-safe precision [food-safety-satisfaction-level] of infector 4 
    set sl-finan-surv  precision [financial-survival-satisfaction-level] of infector 4
    set sl-finan-stab precision [financial-stability-satisfaction-level] of infector 4
    set sl-sleep precision [sleep-satisfaction-level] of infector 4
    set sl-conf precision [conformity-satisfaction-level] of infector 4
    set sl-risk-avoid precision [risk-avoidance-satisfaction-level] of infector 4
    set sl-compl precision [compliance-satisfaction-level] of infector 4
    set sl-belong precision [belonging-satisfaction-level] of infector 4
    set sl-leis precision [leisure-satisfaction-level] of infector 4
    set sl-lux precision [luxury-satisfaction-level] of infector 4 
    set sl-aut precision [autonomy-satisfaction-level] of infector 4
    set asr TRANSFORM-LIST! [activity-statisfaction-tracker] of infector ","
  ]
  [set key "nobody"
  set loc "setup"
  set my-age "setup"]
  
  foreach (list 
    key 
    ticks 
    sd
    mot 
    loc 
    my-age 
    [age] of infectee 
    badass 
    numb
    iw-health 
    iw-food-safe 
    iw-finan-surv  
    iw-finan-stab  
    iw-sleep  
    iw-conf 
    iw-risk-avoid 
    iw-compl 
    iw-belong  
    iw-leis
    iw-lux  
    iw-aut 
    sl-health  
    sl-food-safe
    sl-finan-surv  
    sl-finan-stab 
    sl-sleep 
    sl-conf 
    sl-risk-avoid 
    sl-compl 
    sl-belong 
    sl-leis 
    sl-lux 
    sl-aut
    asr  ) [ x -> set contamination-network-table lput x contamination-network-table]
end


to update-tables 
  set needs-weight-table (list)
  set value-weight-table (list)
  set value-mean-std-table (list)
  set needs-mean-std-table (list)   
  
     
    ask people [
      let key_needs [who] of self
      foreach (list
       ; key_needs 
      precision importance-weight-belonging-subneed 5
      precision importance-weight-financial-stability 5
      precision importance-weight-risk-avoidance 5
      precision importance-weight-compliance 5
      precision importance-weight-conformity 5
      precision importance-weight-luxury 5
      precision importance-weight-leisure 5
      precision importance-weight-food-safety 5
      precision importance-weight-financial-survival 5
      precision importance-weight-sleep 5
      precision importance-weight-health 5
      ) [ x -> set needs-weight-table  lput x needs-weight-table ]
     
      let key_value [who] of self
      foreach (list 
        ;key_value
        precision importance-given-to-hedonism-value 5
        precision importance-given-to-stimulation-value 5 
        precision importance-given-to-self-direction-value 5 
        precision importance-given-to-universalism-value 5
        precision importance-given-to-benevolence-value 5
        precision importance-given-to-conformity-tradition-value 5
        precision importance-given-to-security-value 5
        precision importance-given-to-power-value 5
        precision importance-given-to-achievement-value 5) [x -> set value-weight-table lput x value-weight-table ]
    ]
    
            
    foreach  (list 
      "mean"
      precision mean [importance-weight-belonging-subneed] of people 5 
      precision mean [importance-weight-financial-stability] of people 5
      precision mean [importance-weight-risk-avoidance] of people 5
      precision mean [importance-weight-compliance] of people 5
      precision mean [importance-weight-conformity] of people 5
      precision mean [importance-weight-luxury] of people 5
      precision mean [importance-weight-leisure] of people 5
      precision mean [importance-weight-autonomy] of people 5
      precision mean [importance-weight-food-safety] of people 5
      precision mean [importance-weight-financial-survival] of people 5
      precision mean [importance-weight-sleep] of people 5
      precision mean [importance-weight-health] of people 5
      "std-dev"
      precision standard-deviation [importance-weight-belonging-subneed] of people 5
      precision standard-deviation [importance-weight-financial-stability] of people 5
      precision standard-deviation [importance-weight-risk-avoidance] of people 5
      precision standard-deviation [importance-weight-compliance] of people 5
      precision standard-deviation [importance-weight-conformity] of people 5
      precision standard-deviation [importance-weight-luxury] of people 5
      precision standard-deviation [importance-weight-leisure] of people 5
      precision standard-deviation [importance-weight-autonomy] of people 5
      precision standard-deviation [importance-weight-food-safety] of people 5
      precision standard-deviation [importance-weight-financial-survival] of people 5
      precision standard-deviation [importance-weight-sleep] of people 5
      precision standard-deviation [importance-weight-health] of people 5) [x -> set needs-mean-std-table lput x needs-mean-std-table]
   

    foreach (list 
      "mean"
      precision mean [importance-given-to-hedonism-value] of people 5 
      precision mean [importance-given-to-stimulation-value] of people 5 
      precision mean [importance-given-to-self-direction-value] of people 5 
      precision mean [importance-given-to-universalism-value] of people 5 
      precision mean [importance-given-to-benevolence-value] of people 5 
      precision mean [importance-given-to-conformity-tradition-value] of people 5 
      precision mean [importance-given-to-security-value] of people 5 
      precision mean [importance-given-to-power-value] of people 5 
      precision mean [importance-given-to-achievement-value] of people 5 
      "std-dev"
      precision standard-deviation [importance-given-to-hedonism-value] of people 5 
      precision standard-deviation [importance-given-to-stimulation-value] of people 5 
      precision standard-deviation [importance-given-to-self-direction-value] of people 5 
      precision standard-deviation [importance-given-to-universalism-value] of people 5 
      precision standard-deviation [importance-given-to-benevolence-value] of people 5 
      precision standard-deviation [importance-given-to-conformity-tradition-value] of people 5 
      precision standard-deviation [importance-given-to-security-value] of people 5 
      precision standard-deviation [importance-given-to-power-value] of people 5 
      precision standard-deviation [importance-given-to-achievement-value] of people 5 ) [ x -> set value-mean-std-table lput x value-mean-std-table]

 
  
  
end



to increment-contagion-metrics-from [context infected infector]
  increment-age-infection-information-metrics infected infector
  
  let key (list [age] of infector [age] of infected)
  table:put age-group-to-age-group-#infections-last-tick-table key table:get age-group-to-age-group-#infections-last-tick-table key + 1  
  
    if is-gathering-point? context [
    let gt [gathering-type] of context
    if gt = hospital-gathering-type [set #people-infected-in-hospitals #people-infected-in-hospitals + 1 stop]
    if gt = workplace-gathering-type [set #people-infected-in-workplaces  #people-infected-in-workplaces + 1 stop]
    if gt = home-gathering-type [set #people-infected-in-homes #people-infected-in-homes + 1 stop]
    if gt = public-leisure-gathering-type [set #people-infected-in-public-leisure #people-infected-in-public-leisure + 1 stop]
    if gt = private-leisure-gathering-type [set #people-infected-in-private-leisure #people-infected-in-private-leisure + 1 stop]  
    if gt = school-gathering-type [set #people-infected-in-schools #people-infected-in-schools + 1 stop]  
    if gt = university-gathering-type [set #people-infected-in-universities #people-infected-in-universities + 1 stop]  
    if gt = essential-shop-gathering-type [set #people-infected-in-essential-shops #people-infected-in-essential-shops + 1 stop]  
    if gt = non-essential-shop-gathering-type [set #people-infected-in-non-essential-shops #people-infected-in-non-essential-shops + 1 stop]
  ]
  
  if context = "bus" [set #people-infected-in-pubtrans #people-infected-in-pubtrans + 1 stop]
  if context = "queue-waiting-for-bus" [set #people-infected-in-queuing #people-infected-in-queuing + 1 stop]
  if context = "cars" [set #people-infected-in-shared-cars #people-infected-in-shared-cars + 1 stop]
  if context = "travelling outside" [set #people-infected-in-general-travel #people-infected-in-general-travel + 1 stop]
  error (sentence "unimplemented for" context)
end

to increment-#contacts-per-gathering-type-global-metrics [ts context]
  let #contacts-now (count ts * (count ts - 1)) / 2
  if is-gathering-point? context [
    let gt [gathering-type] of context
    
    if gt = hospital-gathering-type [set #contacts-in-hospitals #contacts-in-hospitals + #contacts-now stop]
    if gt = workplace-gathering-type [set #contacts-in-workplaces  #contacts-in-workplaces + #contacts-now stop]
    if gt = home-gathering-type [set #contacts-in-homes #contacts-in-homes + #contacts-now stop]
    if gt = public-leisure-gathering-type [set #contacts-in-public-leisure #contacts-in-public-leisure + #contacts-now stop]
    if gt = private-leisure-gathering-type [set #contacts-in-private-leisure #contacts-in-private-leisure + #contacts-now stop]  
    if gt = school-gathering-type [set #contacts-in-schools #contacts-in-schools + #contacts-now stop]  
    if gt = university-gathering-type [set #contacts-in-universities #contacts-in-universities + #contacts-now stop]  
    if gt = essential-shop-gathering-type [set #contacts-in-essential-shops #contacts-in-essential-shops + #contacts-now stop]  
    if gt = non-essential-shop-gathering-type [set #contacts-in-non-essential-shops #contacts-in-non-essential-shops + #contacts-now stop]  
  ]
  if context = "bus" [set #contacts-in-pubtrans #contacts-in-pubtrans + #contacts-now stop]
  if context = "queue-waiting-for-bus" [set #contacts-in-queuing #contacts-in-queuing + #contacts-now stop]
  if context = "cars" [set #contacts-in-shared-cars #contacts-in-shared-cars + #contacts-now stop]
  if context = "travelling outside" [set #contacts-in-general-travel #contacts-in-general-travel + #contacts-now stop]
  error (sentence "unimplemented for" context)
end

to  increment-contacts-due-to-group-gathering-global-metrics [ts context]
  
  increment-#contacts-per-gathering-type-global-metrics ts context
  
  ask ts [
    ask other ts [
      let key (list [age] of myself age)
      table:put age-group-to-age-group-#contacts-table key table:get age-group-to-age-group-#contacts-table key + 1
    ]
  ] 
end

to-report ratio-quarantiners-currently-complying-to-quarantine
  if count people with [is-officially-asked-to-quarantine?] = 0 [report 0]
  report count people with [is-officially-asked-to-quarantine? and is-in-quarantine?] / count people with [is-officially-asked-to-quarantine?]
end

to increase-people-being-severe-event-global-metrics [p]
  table:put number-of-people-per-age-having-ever-reached-severe-table [age] of p (table:get number-of-people-per-age-having-ever-reached-severe-table [age] of p + 1)
end

to-report ratio-people-having-ever-reached-severe-infection-status [a]
  report table:get number-of-people-per-age-having-ever-reached-severe-table a / #initial-people-with-age a
end

to-report #initial-people-with-age [a]
  if a = young-age [report    #youngs-at-start]
  if a = student-age [report    #students-at-start]
  if a = worker-age [report    #workers-at-start]
  if a = retired-age [report    #retireds-at-start]
end

to-report age-group-to-age-group-#contacts [infector-age infected-age]
  report table:get age-group-to-age-group-#contacts-table (list infector-age infected-age)
end

to add-my-Rnaught-to-Rnaught-list
  set R-naught-list fput (list number-of-people-I-infected (ticks + (#days-agent-R-naught-remains-in-population-Rnaught-after-moment-of-recovery * #ticks-per-day))) R-naught-list
  
end

to-report R-naught
  let Reproduction-number []
  let mean-reproduction-number 0
  set R-Naught-list filter [x -> item 1 x > ticks] R-Naught-list
  foreach R-Naught-list [x -> set Reproduction-number fput (item 0 x) Reproduction-number]
  
  
 ifelse empty? Reproduction-number [ set mean-reproduction-number 0] [set mean-reproduction-number mean Reproduction-number]
  
  report mean-reproduction-number
  
end

to update-number-of-consecutive-days-R-naught-is-higher-or-lower-than-one
  if R-naught > 1 [
    set rnaught-exceeds-1-for-first-time? true ]
  
  if rnaught-exceeds-1-for-first-time? [
    ifelse R-Naught < 1
    [set consecutive-ticks-R-naught-is-<-one consecutive-ticks-R-naught-is-<-one + 1
      set consecutive-ticks-R-naught-is->=-one 0 ] 
    [set consecutive-ticks-R-naught-is->=-one consecutive-ticks-R-naught-is->=-one + 1
      set consecutive-ticks-R-naught-is-<-one 0 ]  
  ]
end

to-report population-size
if ticks = 0 or ticks = 1 [report count people]
end





