__includes ["scenarios.nls"]

globals[#min-workers-in-adults-homes
  #min-students-in-adults-homes
  #min-retirees-in-retired-couple-homes
  #min-workers-in-family-homes
  #min-students-in-family-homes
  #min-young-in-family-homes
  #min-workers-in-multi-generational-homes
  #min-students-in-multi-generational-homes
  #min-young-in-multi-generational-homes
  #min-retirees-in-multi-generational-homes
  distribution-control-variable
  #workers-to-create
  #students-to-create
  #youth-to-create
  #retireds-to-create
  #people-to-create 
  #hospital-workers-to-create
  #university-workers-to-create
  #school-workers-to-create
  #shopkeepers-to-create
  #workers-in-workplace-to-create
  #created-hospital-workers
  #created-university-workers
  #created-shopkeepers
  #created-school-workers
  #multi-generational-homes
  #adults-homes
  #retired-couple-homes
  #family-homes
  
  ;Sensitivity analysis globals (lhs = Latin Hypercube Sampling, which is used to generate samples for sensitivity analysis)
  lhs_matrix
  experiment-ID
  
]
to setup
  clear-all
  reset-ticks
  
  if clear-log-on-setup? [clear-logfile]
  if log? [print "debug mode active; this dramatically slows down computation speed"]
  check-parameters
  set-default-shape people "circle"
  if log? or static-seed?[  random-seed #random-seed ]
  set slice-of-the-day "morning"
  set day-of-the-week "monday"
  set current-day 0
  set #dead-people 0
  set list-of-dead-people []
  set is-hard-lockdown-measure-activated? false
  set is-soft-lockdown-measure-activated? false
  set was-social-distancing-enforced? false
  set rnaught-exceeds-1-for-first-time? false
  set when-has-2%-infected-threshold-first-been-met? "never"
  set when-has-5%-infected-threshold-first-been-met? "never"
  set start-tick-of-global-quarantine "never"
  set location-violating-quarantining-list (list)
  
  load-nations-cultural-profile-settings
  load-scenario-specific-parameter-settings 
  setup-activities
  create-all-households
  setup-gathering-point-capacities
  setup-gathering-point-density-factor-settings
  setup-person-values-and-needs
  setup-quality-of-life-indicator
  setup-social-networks
  setup-app-users
  setup-complying-to-quarantining-when-asked-value-based
  setup-economic-model
  
  if with-infected? [
    set first-infected-people n-of (min list 3 count people) people
    ask first-infected-people [contaminate nobody ("setup")]
    set #first-infected-people count first-infected-people
  ]
  setup-phasing-out
  
  update-display
  
  ask links[hide-link]
  set list-of-buses (list)
  
  if log-setup? [foreach sort gathering-points [[x]-> log-file-print [(word "description_gathering_poing(" who "," gathering-type ")")] of x]]
  
  ;;must be in the end
  setup-global-metrics
  
  ;if the model is run for the purposes of conducting a sensitivity analysis then calibrate the relevant model parameters accordingly
  ;NOTE: if SA must be performed make sure to activate sensitivity-analysis? in the behaviorspace setup
  if sensitivity-analysis? [setup-lhs-parameter-settings]

end

to setup-global-metrics
  set number-of-people-per-age-having-ever-reached-severe-table table:make
  table:put number-of-people-per-age-having-ever-reached-severe-table young-age 0
  table:put number-of-people-per-age-having-ever-reached-severe-table student-age 0
  table:put number-of-people-per-age-having-ever-reached-severe-table worker-age 0
  table:put number-of-people-per-age-having-ever-reached-severe-table retired-age 0
  
  set #youngs-at-start count youngs
  set #students-at-start count students
  set #workers-at-start count workers
  set #retireds-at-start count retireds  
  
  set age-group-to-age-group-#contacts-table table:make
  set age-group-to-age-group-#infections-last-tick-table table:make
  set #infected-people-per-ticks (list)
  set #hospitalized-per-tick (list)
  set R-naught-list (list)
  set consecutive-ticks-R-naught-is-<-one 0
  set consecutive-ticks-R-naught-is->=-one 0
  reset-metrics
  
end

to setup-lhs-parameter-settings
  load-experiments
  setup-parameters
end

to load-experiments
  ;Check to make sure the lhs data file exists in the same directory as the .nlogo model file:
  
  if GSA_purpose = "Cultural Model GSA" [
    ifelse(file-exists? "cultural_model_GSA_lhs_parameter_samples.data" )
    [
      ;Save the data into a matrix (a list of lists), so it only needs to be loaded once.
      set lhs_matrix []
      file-open "cultural_model_GSA_lhs_parameter_samples.data"
      ;Read in all the data in the file:
      while [ not file-at-end? ]
      [
        ;File-read gives you variables.  In this case numbers.
        ;Using file-read scans each individual datapoint in the provided data file and loads it into the LHS matrix
        ;Each iteration appends 8 items into a list, this is done until the file is at an end...
        ;...since there are 8 items (variables, or columns) for each row in the data file...
        ;...there will be a total of N lists (rows) within the lhs list (i.e. lists within list = a matrix representation in netlogo)
        ;In order to see how many rows (experiments) the lhs_matrix variable contains, use the command 'length lhs_matrix' within an observer context
        set lhs_matrix sentence lhs_matrix (list (list
          file-read file-read file-read file-read file-read file-read file-read file-read ;total = 8 columns (= 8 variables)
        ))
      ]
      ;; Done reading in data.  Close the file.
      file-close
    ][
      user-message "There is no appropriate data file in current directory!"
    ]
  ]
  
  if GSA_purpose = "Cultural Model Experimentation" [
    ifelse (file-exists? "cultural_model_finexp_V1_lhs_parameter_samples.data")
    [
      set lhs_matrix []
      file-open "cultural_model_finexp_V1_lhs_parameter_samples.data"
      while [ not file-at-end? ]
      [
        set lhs_matrix sentence lhs_matrix (list (list
          file-read file-read file-read file-read file-read file-read file-read file-read ;total = 8 columns (= 8 variables)
        ))
      ]
      file-close
    ][
      user-message "There is no appropriate data file in current directory!"
    ]
  ]

  
end

to setup-parameters
  ;IMPORTANT: BehaviorSpace must modify the lhs_experiment_number variable (from 1 to N)
  ;where N is the number of experiments (i.e. the length of 'lhs_matrix' global variable)
  let currentExperiment item lhs_experiment_number lhs_matrix
  
  if GSA_purpose = "Cultural Model GSA" [
    set experiment-ID item 0 currentExperiment
    set contagion-factor item 1 currentExperiment
    set social-distancing-density-factor item 2 currentExperiment
    set std-dev-social-distance-profile item 3 currentExperiment
    set min-random-value-generator item 4 currentExperiment
    set max-random-value-generator item 5 currentExperiment
    set survival-multiplier item 6 currentExperiment
    set maslow-multiplier item 7 currentExperiment
  ]
  
  if GSA_purpose = "Cultural Model Experimentation" [
    set experiment-ID item 0 currentExperiment
    set power-distance item 1 currentExperiment
    set individualism-vs-collectivism item 2 currentExperiment
    set masculinity-vs-femininity item 3 currentExperiment
    set uncertainty-avoidance item 4 currentExperiment
    set long-vs-short-termism item 5 currentExperiment
    set indulgence-vs-restraint item 6 currentExperiment
    set cultural-tightness item 7 currentExperiment
  ]
  
end

to setup-complying-to-quarantining-when-asked-value-based
  
  
  ifelse is-decision-to-quarantine-value-based?
  [ 
    ask max-n-of (ratio-self-quarantining-when-symptomatic * count people) people [
      importance-weight-risk-avoidance +
      importance-weight-compliance] [
      set decide-to-quarantine-when-symptomatic-when-asked? true
    ]
    ask max-n-of (ratio-self-quarantining-when-a-family-member-is-symptomatic * count people) people [
      importance-weight-risk-avoidance +
      importance-weight-compliance] [
      set decide-to-quarantine-when-family-member-is-symptomatic-when-asked? true
    ]
  ]
  [ 
    ask people [ if random-float 1  < ratio-self-quarantining-when-symptomatic [
      set decide-to-quarantine-when-symptomatic-when-asked? true
      ]
      if random-float 1  < ratio-self-quarantining-when-a-family-member-is-symptomatic [
        set decide-to-quarantine-when-family-member-is-symptomatic-when-asked? true
      ]
    ]
  ]
  
end


to setup-app-users
  ask people [
    set is-user-of-tracking-app? false
    set has-mobile-phone? false
    if age = young-age and random-float 1 < ratio-young-with-phones [set has-mobile-phone? true]
    if age = student-age or age = worker-age [set has-mobile-phone? true]
    if age = retired-age and random-float 1 < ratio-retired-with-phones [set has-mobile-phone? true]
  ]
  let #people-using-the-app count people * ratio-of-people-using-the-tracking-app
  let #people-selected-for-their-anxiety-level #people-using-the-app * ratio-of-anxiety-avoidance-tracing-app-users
  let #people-randomly-selected #people-using-the-app - #people-selected-for-their-anxiety-level 
  
  ask max-n-of #people-selected-for-their-anxiety-level people with [has-mobile-phone?] [
    importance-weight-risk-avoidance +
    importance-weight-compliance] [
    setup-as-an-app-user
  ]
  
  ask n-of #people-randomly-selected people with [has-mobile-phone? and not is-user-of-tracking-app?]
  [
    setup-as-an-app-user
  ]
  set people-having-reported-last-round-to-tracking-app-that-they-have-been-tested-positive (list)
  set people-having-ever-been-recorded-as-positive-in-the-app (turtle-set)
end

to setup-as-an-app-user
  set is-user-of-tracking-app? true
  set list-of-people-met-per-day-as-recorded-by-the-tracking-app n-values #ticks-recorded-tracking [(turtle-set)]
end

to check-parameters
  if probability-self-recovery-symptoms + probability-recorvery-if-treated + probability-unavoidable-death > 1
  [
    error "probability-self-recovery-symptoms + probability-recorvery-if-treated + probability-unavoidable-death > 1"
  ]
  
  if probability-self-recovery-symptoms-old + probability-recorvery-if-treated-old + probability-unavoidable-death-old > 1
  [
    error "probability-self-recovery-symptoms-old + probability-recorvery-if-treated-old + probability-unavoidable-death-old > 1"
  ]
end


to create-all-households
  load-population-profile-based-on-current-preset-profile
  
  let #created-households 0
  
  set #hospital-workers-to-create (#workers-to-create * probability-hospital-personel) - count gathering-points with [gathering-type = "hospital"] 
  set #university-workers-to-create (#workers-to-create * probability-university-personel) - count gathering-points with [gathering-type = "university"]
  set #school-workers-to-create (#workers-to-create * probability-school-personel) - count gathering-points with [gathering-type = "school"]
  set #shopkeepers-to-create (#workers-to-create * probability-shopkeeper) - count gathering-points with [gathering-type = "essential-shop"] - count gathering-points with [gathering-type = "non-essential-shop"]
  
  repeat #adults-homes [create-household "adult" #created-households  #households set #created-households  #created-households + 1]
  repeat #family-homes [create-household "family" #created-households  #households set #created-households  #created-households + 1]
  repeat #retired-couple-homes[create-household "retired-couple" #created-households #households set  #created-households  #created-households + 1]
  repeat #multi-generational-homes [create-household "multigenerational" #created-households  #households set  #created-households  #created-households + 1]
  
  ask homes [ set available-food-rations count gatherers * (random days-of-rations-bought + days-of-rations-bought) ]
end

to create-household [t #created-households #households-to-create]
  let current-home nobody
  create-gathering-points 1 [set current-home self
    set homes (turtle-set homes self)
    set gathering-type "home"
    set shape "house"
    set color green
    set xcor 9 * max-pxcor / 10
    set ycor max-pycor * #created-households / #households-to-create
    
  ]
  
  if t = "adult"
  [
    let l-age "undefined"
    ifelse count people with [is-student?] < #students-to-create
    [set l-age student-age]
    [set l-age worker-age]
    setup-person current-home l-age
    setup-person current-home l-age
    stop
  ]
  
  if t = "family"
  [
    setup-person current-home worker-age
    setup-person current-home worker-age
    setup-person current-home young-age
    setup-person current-home young-age
    stop
  ]
  
  if t = "retired-couple"
  [
    setup-person current-home retired-age
    setup-person current-home retired-age
    stop
  ]
  
  if t = "multigenerational"
  [
    setup-person current-home retired-age
    setup-person current-home retired-age
    setup-person current-home worker-age
    setup-person current-home worker-age
    setup-person current-home young-age
    setup-person current-home young-age
    stop
  ]
  
  error (sentence "not implemented" t)
end

to-report my-starting-amount-of-capital
  if age = worker-age [report starting-amount-of-capital-workers]
  if age = retired-age[report starting-amount-of-capital-retired]
  if age = student-age[report starting-amount-of-capital-students]
  if age = young-age[report 0]
end

to setup-person [current-home l-age]
  create-people 1 [
    set age l-age
    set time-when-infected "never"
    
    set has-been-tested-infected? false
    set my-amount-of-capital my-starting-amount-of-capital
    set current-activity current-home
    set my-home current-home
    
    set my-target-amount-of-capital my-amount-of-capital
    set has-been-tested-immune? false
    
    create-gathering-link-to current-home [set features (list "rest" "visit family")]
    set is-moving-outside-for-reaching-current-activity? false
    ;setup-person-home
    
    set is-currently-allocated-a-bed-in-hospital? false   
    setup-relation-to-gathering-points
    setup-transport-modes
    set current-person-I-depend-on nobody
    set color default-color
    set size 0.5
    set infection-state healthy-infection-status
    set epistemic-infection-status "healthy"
    set last-day-observed-symptoms nobody ;should raise an error if used before being initialized
    set has-done-shopping false
    set stayed-out-queuing-for-bus? false
    set is-activity-successful? true
    set decide-to-quarantine-when-family-member-is-symptomatic-when-asked? false
    set decide-to-quarantine-when-symptomatic-when-asked? false
    set used-motorized? false
    
    set I-know-of-social-distancing? ifelse-value Aware-of-social-distancing-at-start-of-simulation? [true] [false]
    set I-know-of-working-from-home? ifelse-value Aware-of-working-at-home-at-start-of-simulation? [true] [false]
    set I-know-of-corona-virus? ifelse-value Aware-of-corona-virus-at-start-of-simulation? [true] [false]
    
    set what-my-network-did-week-day []
    set what-my-network-did-weekend []
    set did-my-network-socially-distance? false
    
    set #days-I-should-remain-in-self-quarantining 0
    set events-to-process (list)
    set quality-of-life-last-day (list)
    
  ]
  
end

to setup-relation-to-gathering-points
  create-gathering-link-to one-of hospitals
  [
    set features (list "get-tested" "get-treatment")
  ]
  
  create-gathering-link-to one-of private-leisure-points
  [  set features (list "relaxing")]
  create-gathering-link-to one-of public-leisure-points
  [ set features (list "relaxing")]
  
  setup-relation-to-gathering-points1
end

to setup-relation-to-gathering-points1
  
  set my-essential-shops n-of (min list 2 (ceiling (#essential-shops-gp * 0.2))) essential-shops
  create-gathering-links-to my-essential-shops
  [ set features (list "essential shopping" "shopping")]
  create-gathering-links-to n-of (min list 4 (ceiling (#non-essential-shops-gp * 0.4))) non-essential-shops
  [ set features (list "relaxing" "shopping")]
  
  if is-young? [
    create-gathering-link-to one-of schools [ set features (list "mandatory")]]
  
  if is-student? [ create-gathering-link-to one-of universities [ set features (list "learning")]]
  
  setup-worker-relation-to-gathering-point
end

to  setup-worker-relation-to-gathering-point
  if is-worker? [
    let hired false
    let target one-of workplaces
    
    ask gathering-points with [is-workplace? or is-hospital? or is-school? or is-university? or is-essential-shop? or is-non-essential-shop?]
    [
      if not any? hired-workers [ set target self set hired true ]
    ]
    
    if not hired
    [
      if #created-hospital-workers < #hospital-workers-to-create
      [
        set target one-of hospitals
        set #created-hospital-workers #created-hospital-workers + 1
        set my-work target
        ask target [set hired-workers (turtle-set hired-workers myself) ] stop
      ]    
      
      if #created-school-workers < #school-workers-to-create
      [
        set target one-of schools
        set #created-school-workers #created-school-workers + 1
        set my-work target
        ask target [set hired-workers (turtle-set hired-workers myself) ] stop
      ]
      
      if #created-university-workers < #university-workers-to-create 
      [
        set target one-of universities
        set #created-university-workers #created-university-workers + 1
        set my-work target
        ask target [set hired-workers (turtle-set hired-workers myself) ] stop
      ]
      
      if #created-shopkeepers <  #shopkeepers-to-create 
      [
        set target one-of shops
        set #created-shopkeepers #created-shopkeepers + 1
        set my-work target
        ask target [set hired-workers (turtle-set hired-workers myself) ] stop
      ]
    ]
    
    set my-work target
    ask target [set hired-workers (turtle-set hired-workers myself)]
  ]
end



to setup-activities
  set hospitals (turtle-set)
  set workplaces (turtle-set)
  set schools (turtle-set)
  set homes (turtle-set)
  set essential-shops (turtle-set)
  set non-essential-shops (turtle-set)
  set universities (turtle-set)
  set public-leisure-points (turtle-set)
  set private-leisure-points (turtle-set)
  
  create-gathering-points #schools-gp [
    set schools (turtle-set schools self)
    set hired-workers (turtle-set)
    set gathering-type "school" set shape "triangle" set color orange set xcor max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "school"] / (#schools-gp + 1)
  ]
  
  create-gathering-points #universities-gp [
    set universities (turtle-set universities self)
    set hired-workers (turtle-set)
    set gathering-type "university" set shape "triangle 2" set color magenta + 2 set xcor 2 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "university"] / (#universities-gp + 1)
  ]
  
  create-gathering-points #workplaces-gp [
    set workplaces (turtle-set workplaces self)
    set hired-workers (turtle-set)
    set gathering-type "workplace" set shape "pentagon" set color sky + 3 set xcor 3 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "workplace"] / (#workplaces-gp + 1)
  ]
  
  create-gathering-points #essential-shops-gp [
    set essential-shops (turtle-set essential-shops self)
    set hired-workers (turtle-set)
    set gathering-type "essential-shop" set shape "cow" set color yellow set xcor 4 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "essential-shop"] / (#essential-shops-gp + 1)
  ]
  
  create-gathering-points #non-essential-shops-gp [
    set non-essential-shops (turtle-set non-essential-shops self)
    set hired-workers (turtle-set)
    set gathering-type "non-essential-shop" set shape "face happy" set color violet + 2 set xcor 5 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "non-essential-shop"] / (#non-essential-shops-gp + 1)
  ]
  
  create-gathering-points #hospital-gp [
    set  hospitals (turtle-set  hospitals self)
    set hired-workers (turtle-set)
    set gathering-type "hospital" set shape "x" set heading 45 set color red set size 2 set xcor 6 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "hospital"] / (#hospital-gp + 1)
  ]
  
  create-gathering-points #public-leisure-gp [
    set public-leisure-points (turtle-set public-leisure-points self)
    set hired-workers (turtle-set)
    set gathering-type "public-leisure" set shape "square 2" set color lime  set xcor 7 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "public-leisure"] / (#public-leisure-gp + 1)
  ]
  
  create-gathering-points #private-leisure-gp [
    set private-leisure-points (turtle-set private-leisure-points self)
    set hired-workers (turtle-set)
    set gathering-type "private-leisure" set shape "square" set color red + 3 set xcor 8 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "private-leisure"] / (#private-leisure-gp + 1)
  ]
  
  ask gathering-points [set hired-workers (turtle-set)] 
  
  setup-activity-animate-positions
  setup-economy
  
  if migration?
  [
    create-gathering-points 1
    [
      set gathering-type "away"
      set away-gathering-point self
      set shape "airplane"
    ]
  ]
  
  ask gathering-points with [gathering-type = 0] [error (sentence "ill defined " self)]
end

to setup-gathering-point-density-factor-settings
  create-transport-model-gathering-points
  ask gathering-points [
    if gathering-type = "hospital" [
      set ventilation "low"
      set sterility "high"
      set length-visit-time "high"
      set crowdedness "low"
    ]
    if gathering-type = "workplace" [
      set ventilation "low"
      set sterility "medium"
      set length-visit-time "high"
      set crowdedness "medium"
    ]
    if gathering-type = "school" [
      set ventilation "low"
      set sterility "low"
      set length-visit-time "high"
      set crowdedness "medium"
    ]
    if gathering-type = "home" [
      set ventilation "low"
      set sterility "low"
      set length-visit-time "high"
      set crowdedness "high"
    ]
    if gathering-type = "private-leisure" [
      set ventilation "low"
      set sterility "low"
      set length-visit-time "high"
      set crowdedness "high"
    ]
    if gathering-type = "public-leisure" [
      set ventilation "high"
      set sterility "high"
      set length-visit-time "high"
      set crowdedness "low"
    ]
    if gathering-type = "university" [
      set ventilation "low"
      set sterility "medium"
      set length-visit-time "high"
      set crowdedness "medium"
    ]
    if gathering-type = "essential-shop" [
      set ventilation "low"
      set sterility "low"
      set length-visit-time "low"
      set crowdedness "high"
    ]
    if gathering-type = "non-essential-shop" [
      set ventilation "low"
      set sterility "low"
      set length-visit-time "low"
      set crowdedness "high"
    ]
    if gathering-type = "walking" [
      set ventilation "high"
      set sterility "high"
      set length-visit-time "low"
      set crowdedness "low"
    ]
    if gathering-type = "queuing" [
      set ventilation "high"
      set sterility "high"
      set length-visit-time "low"
      set crowdedness "high"
    ]
    if gathering-type = "public-transport" [
      set ventilation "low"
      set sterility "low"
      set length-visit-time "medium"
      set crowdedness "high"
    ]
    set raw-density-factor 0
  ]
  
  compute-gathering-point-density-factors
  calibrate-density-factor-globals
end

to create-transport-model-gathering-points
  create-gathering-points 1 [
    set gathering-type "walking"
  ]
  create-gathering-points 1 [
    set gathering-type "queuing"
  ]
  create-gathering-points 1 [
    set gathering-type "public-transport"
  ]
end

to compute-gathering-point-density-factors
  ask gathering-points [
    
    let dim1 0
    let dim2 0
    let dim3 0 
    let dim4 0
    
    if ventilation = "low" [set dim1 1]
    if ventilation = "medium" [set dim1 0.5]
    if ventilation = "high" [set dim1 0]
    
    if sterility = "low" [set dim2 1]
    if sterility = "medium" [set dim2 0.5]
    if sterility = "high" [set dim2 0]
    
    if length-visit-time = "low" [set dim3 0]
    if length-visit-time = "medium" [set dim3 0.5]
    if length-visit-time = "high" [set dim3 1]
    
    if crowdedness = "low" [set dim4 0]
    if crowdedness = "medium" [set dim4 0.5]
    if crowdedness = "high" [set dim4 1]
    
    set raw-density-factor (dim1 * ventilation-weight) + (dim2 * sterility-weight) + (dim3 * length-visit-time-weight) + (dim4 * crowdedness-weight)
    
  ]
  
  if density-factor-computation = "mapping: ranked" [
    
    let ranked-list []
    set ranked-list sort [raw-density-factor] of gathering-points
    set ranked-list remove-duplicates ranked-list
    set ranked-list reverse ranked-list
    
    let density-factor-interval (max-density-factor - min-density-factor) / length ranked-list
    
    ask gathering-points [
      let scaled_rank 0
      foreach ranked-list [
        raw_df -> if raw_df = raw-density-factor [
          set scaled_rank position raw_df ranked-list
          set density-factor (max-density-factor - (density-factor-interval * scaled_rank))
          set density-factor precision density-factor 4
        ]
      ]
    ]
  ]
  
  if density-factor-computation = "mapping: proportional" [
    let raw-df-list [raw-density-factor] of gathering-points
    let max-raw-df max raw-df-list
    let min-raw-df min raw-df-list
    
    ask gathering-points [
      set density-factor clamp min-density-factor max-density-factor (raw-density-factor / max-raw-df)
    ]
  ]
  
end

to calibrate-density-factor-globals
  
  ifelse density-factor-computation = "default" [
    set density-factor-hospitals 0.80
    set density-factor-essential-shops 0.30
    set density-factor-non-essential-shops 0.60
    set density-factor-public-leisure 0.05
    set density-factor-workplaces 0.20
    set density-factor-universities 0.20
    set density-factor-homes 1.00
    set density-factor-private-leisure 0.20
    set density-factor-schools 1.00
    set density-factor-walking-outside 0.05
    set density-factor-queuing 0.6
    set density-factor-public-transport 0.5
  ][
    set density-factor-hospitals [density-factor] of one-of gathering-points with [gathering-type = "hospital"]
    set density-factor-essential-shops [density-factor] of one-of gathering-points with [gathering-type = "essential-shop"]
    set density-factor-non-essential-shops [density-factor] of one-of gathering-points with [gathering-type = "non-essential-shop"]
    set density-factor-public-leisure [density-factor] of one-of gathering-points with [gathering-type = "public-leisure"]
    set density-factor-workplaces [density-factor] of one-of gathering-points with [gathering-type = "workplace"]
    set density-factor-universities [density-factor] of one-of gathering-points with [gathering-type = "university"]
    set density-factor-homes [density-factor] of one-of gathering-points with [gathering-type = "home"]
    set density-factor-private-leisure [density-factor] of one-of gathering-points with [gathering-type = "private-leisure"]
    set density-factor-schools [density-factor] of one-of gathering-points with [gathering-type = "school"]
    set density-factor-walking-outside [density-factor] of one-of gathering-points with [gathering-type = "walking"]
    set density-factor-queuing [density-factor] of one-of gathering-points with [gathering-type = "queuing"]
    set density-factor-public-transport [density-factor] of one-of gathering-points with [gathering-type = "public-transport"]
  ]
  
end

to setup-economy
  ask gathering-points with [gathering-type = "school"] [set amount-of-capital my-default-available-liquidities]
  ask gathering-points with [gathering-type = "university"] [set amount-of-capital my-default-available-liquidities]
  ask gathering-points with [gathering-type = "workplace"] [set amount-of-capital my-default-available-liquidities set stock-of-goods my-max-stock-of-goods]
  ask gathering-points with [gathering-type = "essential-shop"] [set amount-of-capital my-default-available-liquidities set max-amount-of-capital-to-retain amount-of-capital set stock-of-goods max-stock-of-goods-in-a-shop]
  ask gathering-points with [gathering-type = "non-essential-shop"] [set amount-of-capital my-default-available-liquidities set max-amount-of-capital-to-retain amount-of-capital set stock-of-goods max-stock-of-goods-in-a-shop]
  ask gathering-points with [gathering-type = "hospital"] [set amount-of-capital my-default-available-liquidities]
end

to setup-gathering-point-capacities
  ask gathering-points [
    set capacity disabled-capacity
  ]
  ask private-leisure-points [
    set capacity count gatherers
  ]
  ask non-essential-shops [
    set capacity count gatherers
  ]
end

to setup-activity-animate-positions
  if animate? [
    let endless-loop 0
    let to-place gathering-points
    let placed turtle-set nobody
    while [any? to-place] [
      let focal one-of to-place
      let p-pxcor random-pxcor
      let p-pycor random-pycor
      ifelse count to-place > 10 [
        let placing up-to-n-of 4 to-place with [gathering-type = [gathering-type] of focal]
        
        while [any? placed with [abs (p-pxcor - pxcor) <= 2  and abs (p-pycor - pycor) <= 2] or p-pxcor >= (max-pxcor - 1) or p-pxcor <= (min-pxcor + 1) or p-pycor >= (max-pycor - 1) or p-pycor <= (min-pycor + 1)] [
          set endless-loop endless-loop + 1
          if endless-loop > 10000 [error "cannot find a spot!"]
          set p-pxcor random-pxcor
          set p-pycor random-pycor
        ]
        (foreach (up-to-n-of (count placing) (sort (([neighbors] of (patch p-pxcor p-pycor)) with [not member? self [neighbors4] of patch p-pxcor p-pycor]))) (sort placing) [ [ p g ] -> ask g [ move-to p ] ])
        set placed (turtle-set placed placing)
      ] [
        while [any? placed with [abs (p-pxcor - pxcor) <= 1 and abs (p-pycor - pycor) <= 1] or p-pxcor = max-pxcor or p-pxcor = min-pxcor or p-pycor = max-pycor or p-pycor = min-pycor] [
          set p-pxcor random-pxcor
          set p-pycor random-pycor
        ]
        ask focal [
          setxy p-pxcor p-pycor
        ]
        set placed (turtle-set placed focal)
      ]
      set to-place to-place with [not member? self placed]
      
    ]
    ;      ask gathering-points [
    ;        let possible-xcor random-pxcor
    ;        let possible-ycor random-pycor
    ;        while [any? gathering-points-on patch possible-xcor possible-ycor] [
    ;          set possible-xcor random-pxcor
    ;          set possible-ycor random-pycor
    ;        ]
    ;        setxy possible-xcor possible-ycor
    ;      ]
  ]
  
  
end

to setup-economic-model
  set government-reserve-of-capital government-initial-reserve-of-capital
  setup-macro-economic-sectors
end

to setup-macro-economic-sectors
  create-central-banks 1 [hide-turtle set reserve-of-capital 1000000 set total-credit 0]
  
  create-macro-sectors 1 [hide-turtle set sector-type "agriculture-essential" set amount-of-capital 160 set debt-with-central-bank 0]
  create-macro-sectors 1 [hide-turtle set sector-type "agriculture-luxury" set amount-of-capital 170 set debt-with-central-bank 0]
  create-macro-sectors 1 [hide-turtle set sector-type "manufacturing-essential" set amount-of-capital 211 set debt-with-central-bank 0]
  create-macro-sectors 1 [hide-turtle set sector-type "manufacturing-luxury" set amount-of-capital 256 set debt-with-central-bank 0]
  create-macro-sectors 1 [hide-turtle set sector-type "services-essential" set amount-of-capital 360 set debt-with-central-bank 0] ;finances
  create-macro-sectors 1 [hide-turtle set sector-type "services-luxury" set amount-of-capital 330 set debt-with-central-bank 0] ;hospitality
  create-macro-sectors 1 [hide-turtle set sector-type "education-research" set amount-of-capital 88 set debt-with-central-bank 0]
  create-macro-sectors 1 [hide-turtle set sector-type "households" set amount-of-capital 395 set debt-with-central-bank 0]
  create-macro-sectors 1 [hide-turtle set sector-type "government" set amount-of-capital 235 set debt-with-central-bank 0]
  create-macro-sectors 1 [hide-turtle set sector-type "international" set amount-of-capital 1000000 set debt-with-central-bank 0]
  
  ask macro-sectors
  [
    ifelse is-agriculture-essential?
    [
      
      create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 25 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 5 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
      create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
    ]
    [
      ifelse is-agriculture-luxury?
      [
        create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
        
        create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
        create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
        create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
        create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
        create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 5 set drain default-drain set amount-of-capital-in-the-reserve 0]
        create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
        create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 25 set drain default-drain set amount-of-capital-in-the-reserve 0]
        create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 50 set drain default-drain set amount-of-capital-in-the-reserve 0]
      ]
      [
        ifelse is-manufacturing-essential?
        [
          create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 1 set drain default-drain set amount-of-capital-in-the-reserve 0]
          create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 0 set drain default-drain set amount-of-capital-in-the-reserve 0]
          
          create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
          create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
          create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
          create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
          create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
          create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
          create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 70 set drain default-drain set amount-of-capital-in-the-reserve 0]
        ]
        [
          ifelse is-manufacturing-luxury?
          [
            create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 1 set drain default-drain set amount-of-capital-in-the-reserve 0]
            create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 0 set drain default-drain set amount-of-capital-in-the-reserve 0]
            create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
            
            create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
            create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
            create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
            create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
            create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 35 set drain default-drain set amount-of-capital-in-the-reserve 0]
            create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 70 set drain default-drain set amount-of-capital-in-the-reserve 0]
          ]
          [
            ifelse is-services-essential?
            [
              create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
              create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 5 set drain default-drain set amount-of-capital-in-the-reserve 0]
              create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
              create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
              
              create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
              create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 5 set drain default-drain set amount-of-capital-in-the-reserve 0]
              create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 110 set drain default-drain set amount-of-capital-in-the-reserve 0]
              create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 50 set drain default-drain set amount-of-capital-in-the-reserve 0]
              create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 80 set drain default-drain set amount-of-capital-in-the-reserve 0]
            ]
            [
              ifelse is-services-luxury?
              [
                create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
                create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
                create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
                
                create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 5 set drain default-drain set amount-of-capital-in-the-reserve 0]
                create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 100 set drain default-drain set amount-of-capital-in-the-reserve 0]
                create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 25 set drain default-drain set amount-of-capital-in-the-reserve 0]
                create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 80 set drain default-drain set amount-of-capital-in-the-reserve 0]
              ]
              [
                ifelse is-education-research?
                [
                  create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 1 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 1 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 1 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  
                  create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 0 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 5 set drain default-drain set amount-of-capital-in-the-reserve 0]
                ]
                [
                  ifelse is-households-sector?
                  [
                    create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 50 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 30 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 50 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 60 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 80 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    
                    create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 45 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 50 set drain default-drain set amount-of-capital-in-the-reserve 0]
                  ]
                  [
                    ifelse is-government-sector?
                    [
                      create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 15 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 50 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 10 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 40 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 50 set drain default-drain set amount-of-capital-in-the-reserve 0]
                      
                      create-macro-sector-link-to one-of other macro-sectors with [is-international-sector?] [set priority 9 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                    ]
                    [
                      ifelse is-international-sector?
                      [
                        create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-essential?] [set priority 1 set default-drain 120 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-agriculture-luxury?] [set priority 6 set default-drain 120 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-essential?] [set priority 2 set default-drain 100 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-manufacturing-luxury?] [set priority 6 set default-drain 100 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-services-essential?] [set priority 3 set default-drain 80 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-services-luxury?] [set priority 8 set default-drain 80 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-education-research?] [set priority 5 set default-drain 5 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-households-sector?] [set priority 4 set default-drain 20 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        create-macro-sector-link-to one-of other macro-sectors with [is-government-sector?] [set priority 7 set default-drain 15 set drain default-drain set amount-of-capital-in-the-reserve 0]
                        
                      ]
                      [
                        error "Macro-sector not defined"
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
end
